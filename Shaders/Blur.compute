#pragma kernel BlurX
#pragma kernel BlurY

Texture2D<half3> _Source;
RWTexture2D<float3> _Target_RW;

SamplerState sampler_linear_clamp;

half4 _SourceSize;
half4 _TargetSize;

#define RADIUS 4
groupshared half3 gs_Color[64 + 2 * RADIUS];

[numthreads(64, 1, 1)]
void BlurX(uint groupIndex : SV_GroupIndex, uint2 id : SV_DispatchThreadID)
{
    half2 uv = (id + 0.5) * _TargetSize.xy;
    half3 gsColor = _Source.SampleLevel(sampler_linear_clamp, uv, 0);
    gs_Color[groupIndex + RADIUS] = gsColor;

    if(groupIndex < RADIUS)
    {
        gs_Color[groupIndex] = _Source.SampleLevel(sampler_linear_clamp, uv - half2(RADIUS * _TargetSize.x, 0), 0);
    }
    
    if(groupIndex >= 64 - RADIUS)
    {
        gs_Color[groupIndex + RADIUS * 2] = _Source.SampleLevel(sampler_linear_clamp, uv + half2(RADIUS * _TargetSize.x, 0), 0);
    }

    GroupMemoryBarrierWithGroupSync();
    
    if (any(id >= _TargetSize.zw))
    {
        return;
    }

    half3 color = 0.0;

    [unroll]
    for (half i = -RADIUS; i <= RADIUS; i+=1)
    {
        half offset = i * _SourceSize.x;
        half3 c = _Source.SampleLevel(sampler_linear_clamp, uv + half2(offset, 0), 0);
        c = gs_Color[groupIndex + i + 5];
        color += c;
    }
    
    _Target_RW[id] = color / 11;
}

[numthreads(8,8,1)]
void BlurY(uint2 id : SV_DispatchThreadID)
{
    if (any(id >= _TargetSize.zw))
    {
        return;
    }

    half2 uv = (id + 0.5) * _TargetSize.xy;
    half3 color = 0.0;

    [unroll]
    for (half i = -5; i <= 5; i+=1)
    {
        half offset = i * _SourceSize.y;
        half3 c = _Source.SampleLevel(sampler_linear_clamp, uv + half2(0, offset), 0);
        color += c;
    }
    
    _Target_RW[id] = color / 11;
}
